dev_end = "dev"
prod_end = "prod"


buildOptions = {
    dev_end => "Development environment",
    prod_end => "Production environment",
}

desc "Fastlane entry point"
lane :start do
    selected_environment = UI.select("Select your environment build:", buildOptions.values)
    chosen_env = buildOptions.key(selected_environment)
    begin
        if chosen_env == dev_end
            create_dev_build(env: chosen_env)
        else
            create_prod_build(env: chosen_env)
        end
    rescue => error
        UI.error error
    end
end

private_lane :create_dev_build do |values|
    build_number = ""
    version = ""

    # Ask to enter a version or re-enter the current version
    while (version == "" || !(version.match(/^\d+\.\d+\.\d+$/)))
        current_version = find_current_version_build_number().at(0)
        puts "Your version is : #{current_version}"
        version = UI.input("Please enter a new version: ")
    end

    # Ask to enter a build number or re-enter the current build number
    while (build_number == "" || !(build_number.match(/^\d{1,4}$/))) # Only accept digit between (0 , 9999)
        build_number = find_current_version_build_number().at(1)
        puts "Your build number is : #{build_number}"
        build_number = UI.input("Please enter a new build number: ")
    end

    change_version_build_number(version: version, build_number: build_number)

    run_test()

    build_android(env: values[:env])

    sh("open ../build/app/outputs/flutter-apk/")
end

private_lane :create_prod_build do |values|
    build_number = ""
    version = ""

    # Ask to enter a version or re-enter the current version
    while (version == "" || !(version.match(/^\d+\.\d+\.\d+$/)))
        current_version = find_current_version_build_number().at(0)
        puts "Your version is : #{current_version}"
        version = UI.input("Please enter a new version: ")
    end

    # Ask to enter a build number or re-enter the current build number
    while (build_number == "" || !(build_number.match(/^\d{1,4}$/))) # Only accept digit between (0 , 9999)
        build_number = find_current_version_build_number().at(1)
        puts "Your build number is : #{build_number}"
        build_number = UI.input("Please enter a new build number: ")
    end

    change_version_build_number(version: version, build_number: build_number)

    run_test()

    build_android(env: values[:env])

    sh("open ../build/app/outputs/flutter-apk/")
end

def find_current_version_build_number()
    pubspec = File.read("../pubspec.yaml")
    current_version = pubspec.match(/version:\s(\d+\.\d+\.\d+)\+(\d+)/).captures
    return current_version
end

desc "Change build version and build number in pubspec.yaml"
private_lane :change_version_build_number do |values|
    pubspec = File.read("../pubspec.yaml")
    # Create the new text to place in pubspec.yaml
    newPubspec = pubspec.gsub(/(version:\s)\d+\.\d+\.\d+\+\d+/, '\1'+values[:version]+"+"+values[:build_number])
    File.open("../pubspec.yaml", "w") {|file| file.puts newPubspec}
end

desc "Build android builds"
private_lane :build_android do |values|
    build_args = choose_additional_arguments(values[:env])
    sh("flutter build apk #{build_args.at(0)}")
end

desc "Run tests"
private_lane :run_test do
    sh("flutter test ../test/")
end

def choose_additional_arguments(env)
    # Fetch required information from .run files
    runFile = File.read("../.run/"+env+".run.xml")
    build_arg = runFile.match(/name="additionalArgs".*value="(.*)"\s\/>/).captures
    return build_arg
end
